POLIMORFISMO:	Il termine polimorfismo si riferisce in generale alla possibilità data ad una determinata espressione di assumere valori diversi
				in relazione ai tipi di dato a cui viene applicata.
				Si possono distinguere almeno 3 tipi di polimorfismo:
				- ah hoc polymorphism:	detta più comunemente “method overloading” consiste concretamente nella possibilità di “ridefinire” un medesimo metodo 
										per set di parametri diversi.
				- inclusion polymorphism:	questa forma di polimorfismo è strettamente legata al concetto di ereditarietà, e consiste nella possibilità che una sottoclasse A
											ridefinisca un metodo della superclasse B, ed in questo modo, nel momento in cui questo metodo verrà invocato, si comporterà in modo
											diverso a seconda dell'implementazione richiamata (binding dinamico).
				- parametric polymorphism :	è legato al concetto di generics, col quale si possono definire funzioni generiche che possono operare con
																	tipi di dati diverso, a seconda di cosa è stabilito nelle specifiche di generics
																	

OVERLOADING:	metodologia utilizzata per ridefinire un metodo mantenendo lo stesso nome del metodo e lo stesso tipo di valore di ritorno, ma cambiando gli argomenti in input
				e la sua implementazione;
				NB: in questo modo cambia la firma del metodo.
				
OVERRIDING:		metodologia utilizzata per ridefinire il corpo di un metodo, lasciando inalterata la firma del metodo (valore di ritorno, nome del metodo, argomenti in input).
				Un esempio tipico è quello della sottoclasse che ridefinisce un metodo della superclasse.
				
INTERFACCIA:	struttura che contiene delle costanti e dei metodi, tutti pubblici, i quali devono essere implementati dalle classi che implementano l'interfaccia.
				In genere, un'interfaccia definisce dei comportamenti (accelera(), frena()).
				
CLASSE ASTRATTA:	classe in java che contiene variabili e metodi, e può contenere dei metodi astratti. 
					Generalmente, abbiamo una classe astratta quando facciamo astrazione; un esempio:
					io ho le seguenti classi: Quadrupede, Cane, PastoreMaremmano. Ho fatto quindi astrazione, definendo delle caratteristiche comuni (tutti i quadrupedi hanno 4 zampe,
					e quindi una caratteristica di Quadrupede, tutti i cani abbaiano, e quindi una caratteristica comune di Cane). Tuttavia, Quadrupede e Cane sono classi astratte,
					in quanto non riusciamo ad immaginare un Quadrupede o un Cane generico, mentre un PastoreMaremmano sì, quindi sarà istanziabile, ed avrà anche caratteristiche aggiuntive, oltre 
					a quelle comuni precedentemente stabilite (le eredita grazie all'Ereditarietà, con extends).
					NB: Una classe astratta non è istanziabile.
					SBAGLIATO!!! ----> ClasseAstratta c=new ClasseAstratta()
					
DIFFERENZA FRA INTERFACCIA E CLASSE ASTRATTA:	un'interfaccia definisce dei metodi per un determinato comportamento (accelera(), frena()), ed avrà diverse classi che implementano
												questa interfaccia (MotoreFiat, MotoreFerrari): entrambi implementano quei metodi, ma ovviamente la loro implementazione cambierà.
												Tuttavia, il metodo a nostra disposizione (accelera(), frena()) sono sempre quelli esposti nell'interfaccia, quindi sapremo usare
												sia l'una che l'altra, cambia solo la loro implementazione.
												Una classe astratta invece può anche implementare dei metodi (la classe astratta Cane può benissimo implementare il metodo abbaia()).
												Tenere ben presente: classi astratte le incontriamo nella modellazione della realtà, quando facciamo astrazione; le interfacce le troviamo
												quando definiamo un comportamento che deve essere implementato.
												
TIPI PRIMITIVI:	set primi di dati presenti in java (int, long, boolean, ecc.)
				NB: i tipi primitivi non dispongono di metodi
				
CLASSI WRAPPER:	classi speciali, una per ogni tipo di dato primitivo. Sono classi a tutti gli effetti e dispongono di numerosi metodi di utilità.
				Il combilatore java è in grado di mettere un corrispondenza i tipi primitivi con le relative classi wrapper, con un meccanismo chiamato AUTOBOXING.
				
ANNOTATION:		costrutto che conferisce a determinate classi, metodi o variabili, delle proprietà e delle caratteristiche (esempio: @Entity per dire che uan determinata classe
				corrisponde ad una determinata entità nel DB. Questo accade con HIBERNATE.)
				

POJO:	Un pojo è in generale un oggetto contenente soltanto delle proprietà ed i corrispondenti metodi get e set per accedervi 	
	rispettando l'incapsulamento che è uno dei tre capisaldi della programmazione OOP. Inoltre è importante che un pojo non estenda
	delle classi prespecificate, non implementi delle interfacce prespecificate e che non contenga delle annotazioni prespecificate.
	
JAVABEAN:	Sono utilizzate per incapsulare più oggetti in un oggetto singolo (il bean), cosicché tali oggetti possano essere
		passati come un singolo oggetto bean invece che come multipli oggetti individuali. Al fine di funzionare come una classe
		JavaBean, una classe di un oggetto deve obbedire a certe convenzioni in merito ai nomi, alla costruzione e al
		comportamento dei metodi. Queste convenzioni rendono possibile avere tool che possono usare, riusare, sostituire e
		connettere JavaBean. Le convenzioni richieste sono:
			- La classe deve avere un costruttore senza argomenti;
			- Le sue proprietà devono essere accessibili usando get, set, is (usato per i booleani al posto di get) e altri
			  metodi (così detti metodi accessori) seguendo una convenzione standard per i nomi;
			- La classe dovrebbe essere serializzabile (capace di salvare e ripristinare il suo stato in modo persistente);
			- Non dovrebbe contenere alcun metodo richiesto per la gestione degli eventi.
		Inoltre nell'uso del JavaBean nelle pagine JSP, questi possono avere 4 tipi differenti di visibilità:
			- PAGE: ha vita solo per il pageContext specifico;
			- REQUEST: ha vita per tutta la durata della richiesta. Si può accedere al javaBean mediante il metodo 
			  getAttribute() dell'oggetto ServletRequest;
			- SESSION: ha vita per tutta la durata della sessione. Si può accedere al javaBean mediante il metodo 
			  getAttribute() dell'oggetto HttpSession;
			- APPLICATION: ha vita per tutta la durata dell'applicazione. Si può accedere al javaBean mediante il metodo 
			  getAttribute() dell'oggetto ServletContext;

INDICI (DATABASE):	Gli indici sono delle tabelle speciali associate alle tabelle dati e diventano utili nel momento in cui 				vengono eseguite delle query. Una query che recupera tutto il contenuto di una tabella, porta ad uno sforzo 				computazionale notevole, quindi una soluzione per contrastare questo fenomeno (ed abbattere gli sforzi richiesti
			dalla nostra query), potrebbe essere quella di definire un indice, che porterà alla creazione di una tabella
			degli indici, la quale verrà consultata nel momento in cui una query viene eseguita.
			
QUALI CAMPI INDICIZZARE:	Le chiavi primarie sono automaticamente indicizzate. Ad ogni modo, conviene indicizzare quei campi sui
				quali avvengono i controlli (con la clausola WHERE), in modo da rendere più performante il loro 
				recupero.
				
CHIAVE PRIMARIA:	Definisce in modo univoco una tupla (riga) all'interno della tabella. E' una campo che viene automaticamente
			indicizzato, DEVE essere univoco (UNIQUE) e non nullo (NOT NULL) per non violare i vincoli di integrità.
			
DATABASE OLTP vs OLAP:	I database OLTP sono caratterizzati da una grande quantità di operazioni di modifica del DB (inserimenti, 
			cancellazioni o modifiche), e questo richiede un elevato throughput, cioè operazioni di modifica supportate al 
			secondo. Si pensi ad esempio a database costituiti da grandi mole di dati (database delle vendite, database
			delle transazioni finanziare, ecc., i quali vengono aggiornati di continuo).
			I database OLAP sono caratterizzati da dati storici, sui quali avvengono solamente operazioni di retrieve, con 
			le quali vengono recuperati dati e vengono effettuati degli studi, per stabilire ad esempio report di business,
			scoprire relazioni fra determinati fenomeni (l'introduzione di una determinata offerta ha portato ad un notevole
			aumento di transazioni effettuate in una determinata area, ecc.), ed in generale, per effettuare task di data
			mining.
			
DBMS vs RDBMS:		La differenza sta nel fatto che nei DBMS possiamo avere diverse forme di conservazione di dati (in modo 
			gerarchico o navigazionale). Potremmo, ad esempio, avere i dati conservati sotto forma di grafo.
			Nei DBMS i dati possono essere salvati sotto forma di file, potremmo non avere relazioni, non supportano i
			database distribuiti, non viene osservata nessuna politica di sicurezza sui dati, e non c'è normalizzazione.
			Nei RDBMS invece la conservazione dei dati avviene in forma tabellare, abbiamo relazioni fra le varie tabelle, 
			supportano database distribuiti, viene applicata una politica di sicurezza sui dati (come ad esempio l'integrità
			referenziale), c'è la normalizzazione, e troviamo i meccanismi di rollback.
			Ad oggi, la maggior parte dei prodotti (mysql, oracle db, ecc.) supportano tutte le funzionalità dei RDBMS, e 
			quindi sono a tutti gli effetti dei RDBMS.
			
TIPI DI ISTRUZIONI SQL:	DDL(Data Definition Language); istruzioni utilizzate per creare/modificare la struttura di tabelle all'interno 
			del DB. (CREATE, ALTER, DROP)
			DML(Data Manipulation Language); istruzioni utilizzate per inserire/modificare/eliminare righe all'interno di 
			una tabella del DB. (SELECT, INSERT, UPDATE, DELETE)
			DCL(Data Control Language); istruzioni utilizzate per controllare i livelli di accesso a db e tabelle (non li
			abbiamo visti tutti; un esempio sono GRANT, REVOKE)
			TCL(Transaction Control Language); istruzioni utilizzate per controllare un insieme di transazioni effettuate
			sul db. (BEGIN TRANSACTION, COMMIT TRANSACTION, ROLLBACK TRANSACTION)
			
CARDINALITA' DELLE RELAZIONI:	Una relazione indica l'esistenza di un legame fra più tabelle. Esistono diversi tipi di relazione.
				1..1: ad un record di una tabella corrisponde esattamente un solo record di un'altra tabella. Si pensi
				ad esempio alla tabella dei laureati, con chiave primaria ID_MATRICOLA, ed alla tabella delle lauree,
				con chiave primaria ID_MATRICOLA, ed i campi DATA_LAUREA e VOTO_LAUREA. Ad ogni record della tabella
				dei laureati deve necessariamente corrispondere un record della tabella delle lauree.
				1..N: ad un record di una tabella corrisponde uno o più record di un'altra tabella. Si pensi alla 
				tabella degli studenti, con chiave primaria ID_MATRICOLA, e la tabella degli esami, contenente 
				ID_MATRICOLA, ID_ESAME, DATA_ESAME, VOTO. Uno studente sostiene più esami, e quindi ad un record della 
				tabella degli studenti corrisponderanno più record della tabella esami.
				N..N: ad uno o più record di una tabella corrispondono uno o più record di un'altra tabella. Si ricorre
				quindi ad una tabella ausiliaria per tenere traccia di questa relazione. Si pensi ad esempio alla 
				tabella dei partecipanti, con un ID_PERSONA, una tabella dei corsi con ID_CORSO. Uno o più partecipanti
				partecipano a più corsi (Java, Reti, Management, ecc.), e ad un corso partecipano più partecipanti.
				Avremo quindi una tebella ausiliaria, chiamata ad esempio partecipazioni, all'interno della quale ci 
				saranno l'ID_PERSONA del partecipante, l'ID_CORSO del corso a cui partecipa, ed altri campi aggiuntivi 
				(ad esempio la data d'inizio, le assenze, ecc.). Nella tabella ausilaria avremo quindi una situazione
				del genere:
				ID_PERSONA	ID_CORSO	ASSENZE
				1		JAVA		4
				1		RETI		7
				2		JAVA		1
				3		MANAGEMENT	5
				3		RETI		9
				NotaBene: potremmo avere una partecipazione opzionale, e quindi casi in cui ci sono 0..1, 0..N ecc.
				
FOREIGN KEY:	Chiave esterna, cioè colonna presente in una tabella che tiene traccia della relazione con un'altra tabella nel db.
		Riprendendo il caso precedente, nell'esempio 1..N:
		ID_ESAME	ID_MATRICOLA	VOTO
		ESAME_JAVA	1		27
		In questo caso l'ID_MATRICOLA della tabella degli esami indica la relazione che ha con la tabella degli studenti, 
		e quel campo si riferisce ad ID_MATRICOLA della tabella degli studenti.
		
TIPI DI JOIN:	Abbiamo fondamentalmente tre tipi di JOIN in SQL, in dettaglio:
		INNER JOIN; restituisce le righe delle tabelle coinvolte in cui esiste una corrispondenza fra le colonne all'interno
		della clausola ON.
		OUTER JOIN; può essere di tre tipi, LEFT OUTER JOIN, RIGHT OUTER JOIN, FULL OUTER JOIN. Restituisce tutte le righe della
		tabella sinistra (LEFT), destra (RIGHT) o di entrambe le tabelle (FULL), indipendentemente dalla clausola ON, settando
		a NULL i valori delle colonne di quelle righe che non hanno corrispondenza.
		CROSS JOIN; effettua semplicemente un prodotto cartesiano fra le due tabelle.
		
STORED PROCEDURE:	Sono routine memorizzate che effettuano delle operazioni sul db, possono ricevere parametri in input, e possono
			anche restituire un risultato. Sono particolarmente adatte per impedire l'accesso diretto alle tabelle da parte
			degli utenti, avere del codice riutilizzabile, e forniscono anche performance migliori in quanto sono
			pre-compilate e fanno uso di meccanismi di caching.
			Le procedure eseguono dei comandi SQL che vengono visti come un'unica unità di lavoro, e possono essere chiamate 
			esternamente (call) oppure internamente (execute).
			
FUNCTION:		Sono routine memorizzate, e presentano le stesse caratteristiche delle procedure.
			Differenze rispetto alle procedure:
				- devono NECESSARIAMENTE contenere una clausola (RETURNS) che indica il tipo di ritorno
				- devono NECESSARIAMENTE ritornare un risultato, che può essere un singolo dato (scalare) oppure
				  tabellare
				- possono essere chiamate solamente all'interno di un comando SQL, oppure da altre procedure o funzioni
	
TRIGGER:	routin memorizzate, simili alle procedure, ma con una particolarità: sono innescate nel momento in cui si verificano
		determinati eventi (eventi DML o eventi di sistema), ed eseuirà delle operazioni sul db come se fosse implicitamente in una 
		transazione (permettendo così di fare un ROLLBACK se qualcosa dovesse andare storto)
		
PASSAGGIO PARAMETRI:	in PLSQL i parametri sono passati per riferimento, e con gli opportuni modificatori (IN, OUT, INOUT) possono 
			anche essere modificati
			
CURSORE:	E' un puntatore alla memoria nella quale si trovano i dati restituiti da una SELECT. Possiamo avere due tipi di cursore:
		- implicito; se sono sicuro di avere una sola riga come risultato, uso un cursore implicito, e memorizzo in alcune
		  mie variabili i risultati. Ad esempio, per una tabella studenti con campi ID_MATRICOLA, NOME, COGNOME, posso avere
		  il seguente cursore:	SELECT * FROM studenti INTO var_matricola, var_nome, var_cognome WHERE ID_MATRICOLA=1
		- esplicito; qui devo necessariamente dichiarare il cursore con la seguente istruzione:
		  DECLARE cur1 CURSOR IS SELECT * FROM studenti;
		  Adesso ho un cursore, e devo aprirlo (OPEN cur1), in modo da allocare memoria e poter cominciare a scorrere per le 
		  varie righe (FETCH cur1 INTO var_matricola_attuale, var_nome_attuale, var_cognome_attuale).
		  Queste istruzioni, utilizzate ad esempio in un ciclo, permettono un'iterazione sulle righe della tabella studenti.
		  Il cursore alla fine deve essere chiuso (CLOSE cur1), oppure verrà automaticamente chiuso al termine della procedura
		  all'interno della quale viene utilizzato
		I cursori dispongono di diversi attributi (%FOUND, %NOTFOUND, %ISOPEN, %ROWCOUNT), i quali forniscono determinate 
		informazioni (ad esempio, se la tabella fosse composta da 27 studenti, l'istruzione cur1%ROWCOUNT restituirebbe 27)
		
VIEW:	Le viste sono delle query memorizzate con un proprio nome che possono essere considerate simili a tabelle virtuali.
	Utile per semplificare query più complesse.
	
CONSTRAINT:	Sono regole definite sulle tabelle, che devono essere rispettate nel momento in cui avviene un'operazione sul db.
		Possiamo impostare i seguenti constraint:
		- PRIMARY KEY
		- FOREIGN KEY
		- NOT NULL; il valore di un un campo non può essere nullo
		- UNIQUE; il valore di un campo non può essere ripetuto più di una volta
		- CHECK; assicura che il valore di un campo rispetti determinati criteri
		- DEFAULT; stabilisce il valore di default di un campo, nel caso in cui non venga inserito

INTEGRITA' REFERENZIALE:	vincolo secondo il quale il valore di un campo in una tabella, essendo chiave esterna, deve 
				necessariamente referenziare (riferirsi) un valore ESISTENTE di un campo in un'altra tabella, campo
				che sarà la chiave primaria dell'altra tabella
				
//MANCA SOLAMENTE LA NORMALIZZAZIONE
